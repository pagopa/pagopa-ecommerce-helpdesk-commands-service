# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

# --- START Deploy DEV --- #
stages:

  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV'
    condition: and(succeeded(), not(${{ parameters.SKIP_BUILD }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"

          - task: Bash@3
            displayName: "docker build and push (force)"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, True))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                echo "[INFO] the parameter FORCE_REPLACE_DOCKER_IMAGE is set to true, start build and push"
                echo "[INFO] Image version: $(Build.SourceVersion)"
                docker build -t $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker build -t $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker push $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                docker push $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest

          - task: Bash@3
            displayName: "docker build and push"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, False))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                # docker will return 0 on success or 1 on failure.
                echo "[INFO] Image version: $(Build.SourceVersion)"
                docker manifest inspect $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) > /dev/null
                if [ $? -eq 0 ]; then
                  echo "[INFO] docker image already exists in the registry, skip build and push"
                else
                  echo "[INFO] docker image does not exist in the registry, start build and push"
                  docker build -t $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker build -t $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker push $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                  docker push $(DEV_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest
                fi

  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.SKIP_BUILD }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)
  # --- END Deploy DEV --- #

  # --- START API TEST for DEV DEPLOY --- #
  - stage: "API_DEV_test_V1"
    displayName: 'Running API test on dev app V1'
    dependsOn: Deploy_for_DEV
    jobs:
      - job: newman_api_test
        steps:
          - template: azure-templates/api-tests.yml
            parameters:
              ENV_FILE: "api-tests/env/helpdeskcommands_dev.env.json"
              API_TEST_FILE: "api-tests/v1/helpdeskcommands.api.tests.dev.json"
              TEST_FILE_PREFIX: "dev"
              API_SUBSCRIPTION_KEY: $(HELPDESK_TESTING_API_KEY_DEV)
  # --- END API TEST for DEV DEPLOY --- #


  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: []
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_PROD_DEPLOY}}, true),
      or(
      eq(variables['Build.SourceBranch'], 'refs/heads/main'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags')
      )
      )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"

          - task: Bash@3
            displayName: "docker build and push (force)"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, True))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                echo "[INFO] the parameter FORCE_REPLACE_DOCKER_IMAGE is set to true, start build and push"
                echo "[INFO] Image version: $(Build.SourceVersion)"
                docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest

          - task: Bash@3
            displayName: "docker build and push"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, False))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                # docker will return 0 on success or 1 on failure.
                echo "[INFO] Image version: $(Build.SourceVersion)"
                docker manifest inspect $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) > /dev/null
                if [ $? -eq 0 ]; then
                  echo "[INFO] docker image already exists in the registry, skip build and push"
                else
                  echo "[INFO] docker image does not exist in the registry, start build and push"
                  docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                  docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest
                fi

          - template: azure-templates/chart-current-version.yml

  - stage: "Get_Release_Version"
    displayName: "Get the app version to deploy"
    dependsOn: Build_release_candidate
    condition: in(dependencies.Build_release_candidate.result, 'Succeeded', 'Skipped')
    jobs:
      - job: "get_version"
        steps:
          - template: azure-templates/chart-current-version.yml

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Get_Release_Version
    condition:
      and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, false)
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)


  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [tag_docker_release,Get_Release_Version]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)
  # --- END Deploy UAT --- #

  # --- START API TEST for GREEN UAT DEPLOY --- #
  - stage: "Green_API_UAT_test_V1"
    displayName: 'Running API test on green app V1'
    dependsOn: Deploy_UAT_Green
    jobs:
      - job: newman_api_test
        steps:
          - template: azure-templates/api-tests.yml
            parameters:
              ENV_FILE: "api-tests/env/helpdeskcommands_uat.env.json"
              API_TEST_FILE: "api-tests/v1/helpdeskcommands.api.tests.uat.json"
              TEST_FILE_PREFIX: "green-uat"
              API_SUBSCRIPTION_KEY: $(HELPDESK_TESTING_API_KEY_UAT)
  # --- END API TEST for GREEN UAT DEPLOY --- #

  # --- START Deploy PROD --- #
  - stage: "Prod_WaitForApproval"
    displayName: 'PROD approval deployment'
    dependsOn: [Deploy_UAT_Green,Get_Release_Version]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Deploy_UAT_Green.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      release_url: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Approval
        displayName: Manual prod deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD promotions for release $(release_url)"
              onTimeout: 'reject'

  # --- START Deploy PROD --- #
  - stage: "Build_PROD_Green"
    displayName: 'PROD green Build'
    dependsOn: [Prod_WaitForApproval,Get_Release_Version]
    variables:
      prod_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Prod_WaitForApproval.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    jobs:
      - job: "PROD_image"
        displayName: 'Build PROD image'
        steps:
          - task: Docker@2
            displayName: "docker login for UAT"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
          - task: Docker@2
            displayName: "docker login for PROD"
            inputs:
              containerRegistry: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version for PROD"
            inputs:
              targetType: "inline"
              script: |
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version) $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
                docker push $(PROD_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(prod_version)
  - stage: "Deploy_PROD_Green"
    displayName: 'PROD green deployment'
    dependsOn: [Build_PROD_Green,Get_Release_Version]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        eq(dependencies.Build_PROD_Green.result, 'Succeeded'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      prod_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_PROD_deployment"
        displayName: "Green PROD deployment"
        pool:
          name: pagopa-prod-linux
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'PROD'
                    KUBERNETES_SERVICE_CONN: $(PROD_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-prod.yaml"
                    GREEN_VERSION: $(prod_version)
  # --- END Deploy PROD --- #

  # --- START ROLLBACK PROD --- #
  - stage: "Prod_RollbackForApproval"
    displayName: 'PROD ROLLBACK'
    dependsOn: [Deploy_PROD_Green,Get_Release_Version]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.Deploy_PROD_Green.result, 'Succeeded', 'SucceededWithIssues', 'Failed', 'Skipped', 'Canceled'),
        eq(dependencies.Get_Release_Version.result, 'Succeeded')
      )
    variables:
      release_url: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.releaseUrl'] ]
    jobs:
      - job: Prod_Rollback_Approval
        displayName: Manual prod rollback approval
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 30
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject PROD promotions for release $(release_url)"
              onTimeout: 'skip'
  - stage: "Prod_RollbackToLatestRelease"
    displayName: 'PROD rollback to the latest Release'
    dependsOn: [Prod_RollbackForApproval]
    condition: succeeded()
    jobs:
      - job: Prod_Rollback
        pool:
          name: pagopa-prod-linux
        steps:
          - task: HelmDeploy@0
            displayName: Helm Rollback PROD
            inputs:
              kubernetesServiceEndpoint: $(PROD_KUBERNETES_SERVICE_CONN)
              namespace: ecommerce
              command: rollback
              chartName: $(K8S_IMAGE_REPOSITORY_NAME)
              releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
              install: true
              waitForExecution: true
              arguments: $(K8S_IMAGE_REPOSITORY_NAME)
# --- END ROLLBACK PROD --- #
