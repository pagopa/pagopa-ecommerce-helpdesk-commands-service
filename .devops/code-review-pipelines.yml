variables:
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: BuildEndUnitTest
    jobs:
      - job: make_buildEndUnitTest
        steps:
          - task: Cache@2
            inputs:
              key: 'gradle | "$(Agent.OS)" | **/build.gradle.kts' # Swap build.gradle.kts for build.gradle when using Groovy
              restoreKeys: |
                gradle | "$(Agent.OS)"
                gradle
              path: $(GRADLE_USER_HOME)
            displayName: Configure gradle caching

          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: Other
              extraProperties: |
                sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
                sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
                sonar.coverage.exclusions=**/config/*,**/*Mock*,**/model/*
                sonar.coverage.jacoco.xmlReportPaths=./build/reports/jacoco/test/jacocoTestReport.xml
                sonar.junit.reportPaths=./build/test-results/test

          - task: Gradle@3
            displayName: 'Extract commons version'
            inputs:
              gradleWrapperFile: 'gradlew'
              tasks: 'printCommonsVersion -q'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
            name: extractVersion

          - script: |
              COMMONS_VERSION=$(./gradlew -q printCommonsVersion)
              chmod +x ./pagopa-ecommerce-commons-maven-install.sh
              ./pagopa-ecommerce-commons-maven-install.sh $COMMONS_VERSION
            displayName: 'Install ecommerce commons'

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew' # string. Alias: wrapperScript. Required. Gradle wrapper. Default: gradlew.
              tasks: 'build' # string. Required. Tasks. Default: build.
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml' # string. Required when publishJUnitResults = true. Test results files. Default: **/TEST-*.xml.
              codeCoverageToolOption: 'None' # 'None' | 'Cobertura' | 'JaCoCo'. Alias: codeCoverageTool. Code coverage tool. Default: None.
              codeCoverageClassFilesDirectories: 'build/classes/main/' # string. Alias: classFilesDirectories. Required when codeCoverageTool != None. Class files directories. Default: build/classes/main/.
              javaHomeOption: 'JDKVersion' # 'JDKVersion' | 'Path'. Alias: javaHomeSelection. Required. Set JAVA_HOME by. Default: JDKVersion.
              jdkVersionOption: '1.17' # 'default' | '1.11' | '1.10' | '1.9' | '1.8' | '1.7' | '1.6'. Alias: jdkVersion. Optional. Use when javaHomeSelection = JDKVersion. JDK version. Default: default.
              sonarQubeRunAnalysis: true

          - task: SonarCloudPublish@3
            displayName: 'Publish SonarCloud results on build summary'
            inputs:
              pollingTimeoutSec: '300'
          - script: |
              # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
              ./gradlew --stop
            displayName: Gradlew stop

          - task: PublishCodeCoverageResults@2
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'build/reports/jacoco/test/jacocoTestReport.xml'
              reportDirectory: 'build/reports/jacoco/test/html'
            displayName: 'Publish Code Coverage on Azure Devops'

  - stage: IntegrationTest
    dependsOn: []
    jobs:
      - job: make_integration_test
        steps:
            - script: |
                docker compose up mongo-ecommerce -d
              displayName: 'Start MongoDB instance'
            # Debug: Check MongoDB container status
            - script: |
                echo "=== MONGODB CONTAINER DEBUG ==="
                echo "Docker containers status:"
                docker ps -a
                echo "MongoDB container logs:"
                docker logs $(docker ps -aq --filter "name=mongo-ecommerce") || echo "No MongoDB container found"
                echo "Docker compose services:"
                docker compose ps
                echo "=============================="
              displayName: 'Debug: MongoDB Container Status'
            - script: cp .env.example .env
              displayName: 'Setup env'
            # Debug: Show environment configuration
            - script: |
                echo "=== ENVIRONMENT DEBUG ==="
                echo "Environment file contents (sensitive data masked):"
                cat .env | sed 's/password=.*/password=***MASKED***/g' | sed 's/secret=.*/secret=***MASKED***/g'
                echo "========================="
              displayName: 'Debug: Environment Configuration'
            - script: docker compose up -d
              displayName: 'Run app with docker-compose'
            # Debug: Comprehensive container status check
            - script: |
                echo "=== CONTAINER STATUS DEBUG ==="
                echo "All containers:"
                docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                echo ""
                echo "Docker compose services:"
                docker compose ps
                echo ""
                echo "Network information:"
                docker network ls
                echo ""
                echo "Container resource usage:"
                docker stats --no-stream
                echo ""
                echo "Application container logs (last 50 lines):"
                APP_CONTAINER=$(docker compose ps -q | head -1)
                if [ ! -z "$APP_CONTAINER" ]; then
                  docker logs --tail 50 $APP_CONTAINER
                else
                  echo "No application container found"
                fi
                echo "=============================="
              displayName: 'Debug: Comprehensive Container Status'
            # Enhanced health check with debugging
            - script: |
                echo "=== HEALTH CHECK DEBUG ==="
                echo "Starting health check..."
                
                # Function to check and log health status
                check_health() {
                  local attempt=$1
                  echo "Health check attempt $attempt:"
                
                  # Check if port is accessible
                  if nc -z localhost 8080; then
                    echo "✓ Port 8080 is accessible"
                  else
                    echo "✗ Port 8080 is not accessible"
                  fi
                
                  # Check health endpoint
                  HTTP_CODE=$(curl -s -o /dev/null -w '%{http_code}' localhost:8080/actuator/health/liveness || echo "000")
                  echo "HTTP response code: $HTTP_CODE"
                
                  if [ "$HTTP_CODE" = "200" ]; then
                    echo "✓ Health check passed!"
                    return 0
                  else
                    echo "✗ Health check failed"
                    # Show recent application logs on failure
                    echo "Recent application logs:"
                    APP_CONTAINER=$(docker compose ps -q | head -1)
                    if [ ! -z "$APP_CONTAINER" ]; then
                      docker logs --tail 20 $APP_CONTAINER
                    fi
                    return 1
                  fi
                }
                
                # Perform health check with timeout
                attempt=1
                max_attempts=36  # 36 * 5 seconds = 3 minutes
                
                while [ $attempt -le $max_attempts ]; do
                  if check_health $attempt; then
                    echo "Health check successful after $attempt attempts"
                    exit 0
                  fi
                
                  echo "Waiting 5 seconds before next attempt..."
                  sleep 5
                  attempt=$((attempt + 1))
                done
                
                echo "Health check failed after $max_attempts attempts"
                echo "Final container status:"
                docker compose ps
                echo "======================="
                exit 1
              displayName: 'Enhanced Health Check with Debug'
            - script: yarn global add newman
              displayName: 'newman installation'
            - script: newman run api-tests/v1/helpdeskcommands.api.tests.local.json --environment=api-tests/env/helpdeskcommands_local.env.json --reporters cli,junit --reporter-junit-export Results/refunds-api-TEST.xml
              displayName: 'Run refunds api test with mock'
              continueOnError: false
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: '**/*-TEST.xml'
                searchFolder: '$(System.DefaultWorkingDirectory)'