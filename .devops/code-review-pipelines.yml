variables:
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaEcommerceLocal
      type: github
      name: pagopa/pagopa-ecommerce-local
      ref: CHK-4303-update-commands-docker-image
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: BuildEndUnitTest
    jobs:
      - job: make_buildEndUnitTest
        steps:
          - task: Cache@2
            inputs:
              key: 'gradle | "$(Agent.OS)" | **/build.gradle.kts' # Swap build.gradle.kts for build.gradle when using Groovy
              restoreKeys: |
                gradle | "$(Agent.OS)"
                gradle
              path: $(GRADLE_USER_HOME)
            displayName: Configure gradle caching

          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: Other
              extraProperties: |
                sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
                sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
                sonar.coverage.exclusions=**/config/*,**/*Mock*,**/model/*
                sonar.coverage.jacoco.xmlReportPaths=./build/reports/jacoco/test/jacocoTestReport.xml
                sonar.junit.reportPaths=./build/test-results/test

          - task: Gradle@3
            displayName: 'Extract commons version'
            inputs:
              gradleWrapperFile: 'gradlew'
              tasks: 'printCommonsVersion -q'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.21'
            name: extractVersion

          - script: |
              COMMONS_VERSION=$(./gradlew -q printCommonsVersion)
              chmod +x ./pagopa-ecommerce-commons-maven-install.sh
              ./pagopa-ecommerce-commons-maven-install.sh $COMMONS_VERSION
            displayName: 'Install ecommerce commons'

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew' # string. Alias: wrapperScript. Required. Gradle wrapper. Default: gradlew.
              tasks: 'build' # string. Required. Tasks. Default: build.
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml' # string. Required when publishJUnitResults = true. Test results files. Default: **/TEST-*.xml.
              codeCoverageToolOption: 'None' # 'None' | 'Cobertura' | 'JaCoCo'. Alias: codeCoverageTool. Code coverage tool. Default: None.
              codeCoverageClassFilesDirectories: 'build/classes/main/' # string. Alias: classFilesDirectories. Required when codeCoverageTool != None. Class files directories. Default: build/classes/main/.
              javaHomeOption: 'JDKVersion' # 'JDKVersion' | 'Path'. Alias: javaHomeSelection. Required. Set JAVA_HOME by. Default: JDKVersion.
              jdkVersionOption: '1.21' # 'default' | '1.11' | '1.10' | '1.9' | '1.8' | '1.7' | '1.6'. Alias: jdkVersion. Optional. Use when javaHomeSelection = JDKVersion. JDK version. Default: default.
              sonarQubeRunAnalysis: true

          - task: SonarCloudPublish@3
            displayName: 'Publish SonarCloud results on build summary'
            inputs:
              pollingTimeoutSec: '300'
          - script: |
              # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
              ./gradlew --stop
            displayName: Gradlew stop

          - task: PublishCodeCoverageResults@2
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'build/reports/jacoco/test/jacocoTestReport.xml'
              reportDirectory: 'build/reports/jacoco/test/html'
            displayName: 'Publish Code Coverage on Azure Devops'

  - stage: IntegrationTest
    dependsOn: []
    jobs:
      - job: make_integration_test
        steps:
            - script: cp .env.example .env
              displayName: 'Setup env'
            - script: |
                echo "##[debug] Starting MongoDB instance first"
                docker compose up mongo-ecommerce -d
                echo "##[debug] Waiting for MongoDB to be ready..."
                timeout 120 bash -c 'while ! docker compose exec -T mongo-ecommerce mongosh --eval "db.runCommand(\"ping\")" --quiet; do echo "Waiting for MongoDB to be healthy..."; sleep 5; done' || (echo "MongoDB failed to start properly" && exit 1)
              displayName: 'Start and verify MongoDB instance'
            - script: |
                echo "##[debug] Starting all services with docker-compose"
                docker compose up -d
                echo "##[debug] Services started, checking container status..."
                docker compose ps
              displayName: 'Run app with docker-compose'
            - script: |
                echo "##[debug] Waiting for mock services to be ready..."
                timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000/)" != "200" ]]; do echo "Waiting for NPG mock..."; sleep 5; done' || echo "NPG mock health check timeout - continuing"
                timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8096/)" != "200" ]]; do echo "Waiting for PSP mock..."; sleep 5; done' || echo "PSP mock health check timeout - continuing"
              displayName: 'Wait for mock services'
            - script: |
                echo "##[debug] Checking application container logs before health check..."
                docker logs pagopa-ecommerce-helpdesk-commands-service --tail 20
                echo "##[debug] Starting health check for main application..."
                echo "##[debug] Application should be available at localhost:8080/actuator/health/liveness"
                timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/actuator/health/liveness)" != "200" ]]; do echo "$(date): Waiting for application health check... (HTTP $(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/actuator/health/liveness 2>/dev/null || echo "connection failed"))"; docker logs pagopa-ecommerce-helpdesk-commands-service --tail 5; sleep 10; done' || (echo "##[error] Health check failed after 5 minutes" && docker logs pagopa-ecommerce-helpdesk-commands-service --tail 50 && exit 1)
                echo "##[debug] Health check successful!"
              displayName: 'Health check with extended timeout and logging'
            - script: yarn global add newman
              displayName: 'newman installation'
            - script: newman run api-tests/v1/helpdeskcommands.api.tests.local.json --environment=api-tests/env/helpdeskcommands_local.env.json --reporters cli,junit --reporter-junit-export Results/refunds-api-TEST.xml
              displayName: 'Run refunds api test with mock'
              continueOnError: false
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: '**/*-TEST.xml'
                searchFolder: '$(System.DefaultWorkingDirectory)'
            - script: |
                echo "##[debug] Printing logs for all running containers on failure:"
                for container in $(docker ps -q); do
                  name=$(docker inspect --format='{{.Name}}' $container | sed 's/^\/\(.*\)/\1/')
                  echo "===== Logs for $name ====="
                  docker logs $container --tail 50
                  echo "===== End of logs for $name ====="
                done
              condition: failed()
              displayName: 'Print Docker container logs on failure'

  - stage: IntegrationTestEcommerceLocal
    dependsOn: []
    jobs:
      - job: make_integration_test_ecommerce_local
        steps:
          - checkout: pagopaEcommerceLocal
          - script: |
              echo "##[debug] Change placeholder for helpdesk-commands-service set branch: $(BRANCH_NAME)"
              sed -i "s/^ECOMMERCE_HELPDESK_COMMANDS_COMMIT_SHA=.*$/ECOMMERCE_HELPDESK_COMMANDS_COMMIT_SHA=$(BRANCH_NAME)/" .env
            displayName: 'Change helpdesk-commands branch name ecommerce-local .env'
          - script: |
              docker compose up storage -d
              sleep 10
              docker compose run --rm azurite-init
              docker compose up pagopa-ecommerce-helpdesk-commands-service pagopa-ecommerce-transactions-service pagopa-ecommerce-event-dispatcher-service mongo redis pagopa-npg-mock pagopa-notifications-service -d
            displayName: 'Run app with docker-compose'
          - script: |
              timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8087/actuator/health/liveness)" != "200" ]]; do sleep 5; done' || exit 1
            displayName: 'Health check helpdesk-commands-service'
          - script: yarn global add newman
            displayName: 'newman installation'
          - script: newman run api-tests/helpdesk-commands-service/helpdesk-commands-service_tests.postman_collection.json --environment=api-tests/helpdesk-commands-service/helpdesk-commands-service_tests.postman_environment.json --reporters cli,junit --reporter-junit-export Results/helpdesk-commands-ecommerce-local-api-TEST.xml
            displayName: 'Run helpdesk-commands API tests (ecommerce-local)'
            continueOnError: false
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'