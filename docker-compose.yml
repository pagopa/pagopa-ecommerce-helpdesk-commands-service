version: '3.8'

services:
  pagopa-ecommerce-helpdesk-commands-service:
    container_name: pagopa-ecommerce-helpdesk-commands-service
    build:
      dockerfile: Dockerfile
      context: .
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    networks:
      - pagopa-ecommerce-net
  pagopa-npg-mock:
    build:
      context: .
      dockerfile: npg-mock/Dockerfile.npg-mock
    container_name: pagopa-NPG-mock-helpdesk-cmd
    volumes:
      - type: bind
        source: ./npg-mock
        target: /config
        read_only: true
    ports:
      - "3000:3000"
    networks:
      - pagopa-ecommerce-net
  pagopa-psp-mock:
    build:
      context: .
      dockerfile: psp-mock/Dockerfile.psp-mock
    volumes:
      - type: bind
        source: ./psp-mock
        target: /config
        read_only: true
    ports:
      - "8096:3000"
    networks:
      - pagopa-ecommerce-net
  mongo-ecommerce:
    container_name: pagopa-helpdesk-mongo
    image: mongo@sha256:e2a89840984371bb7b5b207347cd3cf0ed77e1a496dfd14affc12b6b5e4eaea3
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - pagopa-ecommerce-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"

networks:
  pagopa-ecommerce-net:
    name: pagopa-ecommerce-net
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  mongodb_data: