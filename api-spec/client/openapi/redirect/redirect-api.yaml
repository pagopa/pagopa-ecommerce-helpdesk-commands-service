openapi: 3.0.0
info:
  version: 0.0.1
  title: Pagopa Redirect
  description: >
    Collection of all api used for perform a transaction using redirect payment instrument.
    Api's are tagged as follow:
      * `b2b - PSP side` are implemented and exposed by PSP to expose api's  to p retrieve redirection URL and perform refund. For further information on connectivity, see [pagoPA connettivity](https://docs.pagopa.it/sanp/appendici/connettivita#nodo-dei-pagamenti-client).
      * `b2b - pagoPA side` are implemented and exposed by pagoPA to receive authorization outcome. For further information on connectivity, see [pagoPA connettivity](https://docs.pagopa.it/sanp/appendici/connettivita#nodo-dei-pagamenti-server).
  contact:
    name: pagoPA - Touchpoints team
tags:
  - name: b2b - PSP side
    description: Api's to initialize and refund a transaction
servers:
  - url: https://${host}
externalDocs:
  url: https://docs.pagopa.it/sanp/prestatore-di-servizi-di-pagamento/modalita-di-integrazione/integrazione-per-strumento-di-pagamento-tramite-redirect
  description: SANP
paths:
  /redirections/refunds:
    post:
      externalDocs:
        url:  https://docs.pagopa.it/sanp/prestatore-di-servizi-di-pagamento/modalita-di-integrazione/integrazione-per-strumento-di-pagamento-tramite-redirect#api-annullo
        description: Api annullo (SANP)
      tags:
        - b2b - PSP side
      operationId: RefundTransaction
      summary: Api for refund
      description: |
        Perform a refund for a transaction. Semantically this endpoint is a DELETE with body (HTTP requests with the DELETE method should not have a body as per [RFC 9110, section 9.3.5, paragraph 5](https://www.rfc-editor.org/rfc/rfc9110#DELETE)).
      requestBody:
        $ref: '#/components/requestBodies/RefundRequest'

      responses:
        '200':
          description: Successful refund response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                status: 400
                detail: Bad request
                idTransaction: 3fa85f6457174562b3fc2c963f66afa6
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                status: 401
                detail: Unauthorized
                idTransaction: 3fa85f6457174562b3fc2c963f66afa6
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                status: 404
                detail: Transaction not found
                idTransaction: 3fa85f6457174562b3fc2c963f66afa6
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
              example:
                status: 500
                detail: There was an error processing the request
                idTransaction: 3fa85f6457174562b3fc2c963f66afa6
components:
  schemas:
    ProblemJson:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          $ref: '#/components/schemas/HttpStatusCode'
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
        idTransaction:
          $ref: '#/components/schemas/PagopaIdTransaction'
    HttpStatusCode:
      type: integer
      format: int32
      description: |-
        The HTTP status code generated by the origin server for this occurrence
        of the problem.
      minimum: 400
      maximum: 600
      exclusiveMaximum: true
      example: 400
    RefundResponse:
      type: object
      description: Refund response body
      properties:
        idTransaction:
          $ref: '#/components/schemas/PagopaIdTransaction'
        outcome:
          $ref: '#/components/schemas/RefundOutcome'
      required:
        - idTransaction
        - outcome
    PagopaIdTransaction:
      description: Uniquely identify a transaction
      type: string
      minLength: 32
      maxLength: 32
      example: 3fa85f6457174562b3fc2c963f66afa6
    RefundOutcome:
      description: |
        Refund operation outcome:
        it can be one of the following values:
        * OK - `Refund operation processed successfully`
        * KO - `There was an error performing refund`
        * CANCELED - `The transaction was already refunded`
      type: string
      enum:
        - OK
        - KO
        - CANCELED
    RefundRequest:
      type: object
      properties:
        idTransaction:
          $ref: '#/components/schemas/PagopaIdTransaction'
        idPSPTransaction:
          description: PSP transaction id
          type: string
        action:
          description: Requested action (i.e. refund)
          type: string
      required:
        - idTransaction
        - idPSPTransaction
        - action
      example:
        idTransaction: 3fa85f6457174562b3fc2c963f66afa6
        idPSPTransaction: idPSPTransaction
        action: refund
  requestBodies:
    RefundRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundRequest'
  securitySchemes:
    PagopaApiKeyAuth:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
      description: pagoPA api key